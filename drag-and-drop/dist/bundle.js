!function(e){var t={};function r(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(n,s,function(t){return e[t]}.bind(null,s));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class n{constructor(e,t,r,n){this.insertPosition=r,this.templateEl=document.getElementById(e),this.rootEl=document.getElementById(t);const s=document.importNode(this.templateEl.content,!0);this.element=s.firstElementChild,this.element.id=n||"",this.attach()}attach(){this.rootEl.insertAdjacentElement(this.insertPosition,this.element)}}function s(e,t,r){const n=r.value;return{configurable:!0,get(){return n.bind(this)}}}var i;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(i||(i={}));class o{constructor(e,t,r,n,s){this.id=e,this.title=t,this.description=r,this.people=n,this.status=s}}class l extends class{constructor(){this.listeners=[]}addListeners(e){this.listeners.push(e)}}{constructor(){super(),this.projects=[]}static getInstance(){return this.instance?this.instance:new l}addProject(e,t,r){const n=new o(Math.random().toString(),e,t,r,i.Active);this.projects.push(n),this.updateListeners()}moveProject(e,t){const r=this.projects.find(t=>t.id===e);r&&r.status!==t&&(r.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const a=l.getInstance();var c=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class d extends n{constructor(){super("project-input","app","afterbegin","user-input"),this.inputDesc=document.getElementById("description"),this.inputPeople=document.getElementById("people"),this.inputTitle=document.querySelector("#title"),this.configure()}configure(){this.element.addEventListener("submit",this.handleSubmit)}fillContent(){}clearInputs(){this.inputTitle.value=this.inputDesc.value=this.inputPeople.value=""}gatherInputs(){const e=this.inputTitle.value,t=this.inputDesc.value,r=this.inputPeople.value;return this.clearInputs(),[e.trim(),t.trim(),r.trim()].some(e=>""===e)?void alert("Invalid input!! Please try again"):[e,t,+r]}handleSubmit(e){e.preventDefault();const t=this.gatherInputs();Array.isArray(t)&&a.addProject(...t)}}c([s],d.prototype,"handleSubmit",null);var u=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class p extends n{constructor(e,t){super("single-project",e,"beforeend",t.id),this.project=t,this.configure(),this.fillContent()}get persons(){return this.project.people+" person(s) assigned"}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragStopHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragStopHandler)}fillContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons,this.element.querySelector("p").textContent=this.project.description}}u([s],p.prototype,"dragStartHandler",null);var h=function(e,t,r,n){var s,i=arguments.length,o=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var l=e.length-1;l>=0;l--)(s=e[l])&&(o=(i<3?s(o):i>3?s(t,r,o):s(t,r))||o);return i>3&&o&&Object.defineProperty(t,r,o),o};class f extends n{constructor(e){super("project-list","app","beforeend",e+"-projects"),this.type=e,this.assignedProjects=[],this.configure(),this.fillContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain");a.moveProject(t,"active"===this.type?i.Active:i.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}renderProject(){document.getElementById(this.type+"-projects-list").innerHTML="";for(const e of this.assignedProjects)new p(this.element.querySelector("ul").id,e)}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),a.addListeners(e=>{this.assignedProjects=e.filter(e=>"active"===this.type?e.status===i.Active:e.status===i.Finished),this.renderProject()})}fillContent(){const e=this.type+"-projects-list";this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" Projects"}}h([s],f.prototype,"dragOverHandler",null),h([s],f.prototype,"dropHandler",null),h([s],f.prototype,"dragLeaveHandler",null),new d,new f("active"),new f("finished")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,